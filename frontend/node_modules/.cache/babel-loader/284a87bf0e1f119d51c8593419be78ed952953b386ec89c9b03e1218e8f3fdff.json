{"ast":null,"code":"const csrfFetch = async function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there are no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\" and the \"X-CSRF-Token\" header to the value of the\n  // \"X-CSRF-Token\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n  }\n\n  // call fetch with the url and the updated options hash\n  const res = await fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n};\nexport function storeCSRFToken(response) {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\nexport async function restoreCSRF() {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  return response;\n}\nexport default csrfFetch;","map":{"version":3,"names":["csrfFetch","url","options","method","headers","toUpperCase","sessionStorage","getItem","res","fetch","status","storeCSRFToken","response","csrfToken","get","setItem","restoreCSRF"],"sources":["/mnt/c/Users/brend/Desktop/questrabbit2.0/frontend/src/store/csrf.js"],"sourcesContent":["const csrfFetch = async (url, options = {}) => {\r\n    // set options.method to 'GET' if there is no method\r\n    options.method = options.method || 'GET';\r\n    // set options.headers to an empty object if there are no headers\r\n    options.headers = options.headers || {};\r\n\r\n    // if the options.method is not 'GET', then set the \"Content-Type\" header to\r\n    // \"application/json\" and the \"X-CSRF-Token\" header to the value of the\r\n    // \"X-CSRF-Token\" cookie\r\n    if (options.method.toUpperCase() !== 'GET') {\r\n        options.headers['Content-Type'] =\r\n            options.headers['Content-Type'] || 'application/json';\r\n        options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\r\n    }\r\n\r\n    // call fetch with the url and the updated options hash\r\n    const res = await fetch(url, options);\r\n\r\n    // if the response status code is 400 or above, then throw an error with the\r\n    // error being the response\r\n    if (res.status >= 400) throw res;\r\n\r\n    // if the response status code is under 400, then return the response to the\r\n    // next promise chain\r\n    return res;\r\n}\r\n\r\nexport function storeCSRFToken(response) {\r\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\r\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\r\n}\r\n\r\nexport async function restoreCSRF() {\r\n    const response = await csrfFetch(\"/api/session\");\r\n    storeCSRFToken(response);\r\n    return response;\r\n}\r\n\r\nexport default csrfFetch;\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,gBAAOC,GAAG,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EACtC;EACAA,OAAO,CAACC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,KAAK;EACxC;EACAD,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,CAAC,CAAC;;EAEvC;EACA;EACA;EACA,IAAIF,OAAO,CAACC,MAAM,CAACE,WAAW,EAAE,KAAK,KAAK,EAAE;IACxCH,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,GAC3BF,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;IACzDF,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,GAAGE,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;EAC5E;;EAEA;EACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,OAAO,CAAC;;EAErC;EACA;EACA,IAAIM,GAAG,CAACE,MAAM,IAAI,GAAG,EAAE,MAAMF,GAAG;;EAEhC;EACA;EACA,OAAOA,GAAG;AACd,CAAC;AAED,OAAO,SAASG,cAAc,CAACC,QAAQ,EAAE;EACrC,MAAMC,SAAS,GAAGD,QAAQ,CAACR,OAAO,CAACU,GAAG,CAAC,cAAc,CAAC;EACtD,IAAID,SAAS,EAAEP,cAAc,CAACS,OAAO,CAAC,cAAc,EAAEF,SAAS,CAAC;AACpE;AAEA,OAAO,eAAeG,WAAW,GAAG;EAChC,MAAMJ,QAAQ,GAAG,MAAMZ,SAAS,CAAC,cAAc,CAAC;EAChDW,cAAc,CAACC,QAAQ,CAAC;EACxB,OAAOA,QAAQ;AACnB;AAEA,eAAeZ,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}