{"ast":null,"code":"import csrfFetch from './csrf';\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\nconst setCurrentUser = user => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n};\nconst removeCurrentUser = () => {\n  return {\n    type: REMOVE_CURRENT_USER\n  };\n};\nconst storeCSRFToken = response => {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nconst storeCurrentUser = user => {\n  console.log(user);\n  if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));else sessionStorage.removeItem(\"currentUser\");\n};\nexport const signup = user => async dispatch => {\n  const {\n    username,\n    password,\n    adventurer,\n    avg_rating,\n    total_ratings,\n    elite,\n    pitch,\n    family_crest,\n    realm,\n    star_sign\n  } = user;\n  const response = await csrfFetch(\"/api/users\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      username,\n      password,\n      adventurer,\n      avg_rating,\n      total_ratings,\n      elite,\n      pitch,\n      family_crest,\n      realm,\n      star_sign\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const login = user => async dispatch => {\n  const {\n    username,\n    password\n  } = user;\n  const response = await csrfFetch('/api/session', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await csrfFetch(\"/api/session\", {\n    method: \"DELETE\"\n  });\n  storeCurrentUser(null);\n  dispatch(removeCurrentUser());\n  return response;\n};\nexport const restoreSession = () => async dispatch => {\n  const response = await csrfFetch(\"/api/session\");\n  storeCSRFToken(response);\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","setCurrentUser","user","type","payload","removeCurrentUser","storeCSRFToken","response","csrfToken","headers","get","sessionStorage","setItem","storeCurrentUser","console","log","JSON","stringify","removeItem","signup","dispatch","username","password","adventurer","avg_rating","total_ratings","elite","pitch","family_crest","realm","star_sign","method","body","data","json","login","logout","restoreSession","initialState","parse","getItem","sessionReducer","state","action"],"sources":["/mnt/c/Users/brend/Desktop/questrabbit2.0/frontend/src/store/session.js"],"sourcesContent":["import csrfFetch from './csrf';\r\n\r\nconst SET_CURRENT_USER = 'session/setCurrentUser';\r\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\r\n\r\nconst setCurrentUser = (user) => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: user\r\n    };\r\n};\r\n\r\nconst removeCurrentUser = () => {\r\n    return {\r\n        type: REMOVE_CURRENT_USER\r\n    };\r\n};\r\n\r\nconst storeCSRFToken = response => {\r\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\r\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\r\n}\r\n\r\nconst storeCurrentUser = user => {\r\n    console.log(user)\r\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\r\n    else sessionStorage.removeItem(\"currentUser\");\r\n}\r\n\r\nexport const signup = (user) => async (dispatch) => {\r\n    const { username, password, adventurer, avg_rating, total_ratings,\r\n         elite, pitch, family_crest, realm, star_sign } = user;\r\n    const response = await csrfFetch(\"/api/users\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            username,\r\n            password,\r\n            adventurer,\r\n            avg_rating,\r\n            total_ratings,\r\n            elite,\r\n            pitch,\r\n            family_crest,\r\n            realm,\r\n            star_sign\r\n        })\r\n    });\r\n    const data = await response.json();\r\n    storeCurrentUser(data.user);\r\n    dispatch(setCurrentUser(data.user));\r\n    return response;\r\n};\r\n\r\nexport const login = (user) => async (dispatch) => {\r\n    const { username, password } = user;\r\n    const response = await csrfFetch('/api/session', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            username,\r\n            password\r\n        })\r\n    });\r\n    const data = await response.json();\r\n    storeCurrentUser(data.user);\r\n    dispatch(setCurrentUser(data.user));\r\n    return response;\r\n};\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    const response = await csrfFetch(\"/api/session\", {\r\n        method: \"DELETE\"\r\n    });\r\n    storeCurrentUser(null);\r\n    dispatch(removeCurrentUser());\r\n    return response;\r\n};\r\n\r\nexport const restoreSession = () => async dispatch => { \r\n    const response = await csrfFetch(\"/api/session\");\r\n    storeCSRFToken(response);\r\n    const data = await response.json(); \r\n    storeCurrentUser(data.user);\r\n    dispatch(setCurrentUser(data.user));\r\n    return response;\r\n};\r\n\r\nconst initialState = {\r\n    user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\r\n};\r\n\r\nconst sessionReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return { ...state, user: action.payload };\r\n        case REMOVE_CURRENT_USER:\r\n            return { ...state, user: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sessionReducer;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,QAAQ;AAE9B,MAAMC,gBAAgB,GAAG,wBAAwB;AACjD,MAAMC,mBAAmB,GAAG,2BAA2B;AAEvD,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC7B,OAAO;IACHC,IAAI,EAAEJ,gBAAgB;IACtBK,OAAO,EAAEF;EACb,CAAC;AACL,CAAC;AAED,MAAMG,iBAAiB,GAAG,MAAM;EAC5B,OAAO;IACHF,IAAI,EAAEH;EACV,CAAC;AACL,CAAC;AAED,MAAMM,cAAc,GAAGC,QAAQ,IAAI;EAC/B,MAAMC,SAAS,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACtD,IAAIF,SAAS,EAAEG,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEJ,SAAS,CAAC;AACpE,CAAC;AAED,MAAMK,gBAAgB,GAAGX,IAAI,IAAI;EAC7BY,OAAO,CAACC,GAAG,CAACb,IAAI,CAAC;EACjB,IAAIA,IAAI,EAAES,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEI,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC,CAAC,KACjES,cAAc,CAACO,UAAU,CAAC,aAAa,CAAC;AACjD,CAAC;AAED,OAAO,MAAMC,MAAM,GAAIjB,IAAI,IAAK,MAAOkB,QAAQ,IAAK;EAChD,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,UAAU;IAAEC,aAAa;IAC5DC,KAAK;IAAEC,KAAK;IAAEC,YAAY;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAG5B,IAAI;EAC1D,MAAMK,QAAQ,GAAG,MAAMT,SAAS,CAAC,YAAY,EAAE;IAC3CiC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEhB,IAAI,CAACC,SAAS,CAAC;MACjBI,QAAQ;MACRC,QAAQ;MACRC,UAAU;MACVC,UAAU;MACVC,aAAa;MACbC,KAAK;MACLC,KAAK;MACLC,YAAY;MACZC,KAAK;MACLC;IACJ,CAAC;EACL,CAAC,CAAC;EACF,MAAMG,IAAI,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,EAAE;EAClCrB,gBAAgB,CAACoB,IAAI,CAAC/B,IAAI,CAAC;EAC3BkB,QAAQ,CAACnB,cAAc,CAACgC,IAAI,CAAC/B,IAAI,CAAC,CAAC;EACnC,OAAOK,QAAQ;AACnB,CAAC;AAED,OAAO,MAAM4B,KAAK,GAAIjC,IAAI,IAAK,MAAOkB,QAAQ,IAAK;EAC/C,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGpB,IAAI;EACnC,MAAMK,QAAQ,GAAG,MAAMT,SAAS,CAAC,cAAc,EAAE;IAC7CiC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEhB,IAAI,CAACC,SAAS,CAAC;MACjBI,QAAQ;MACRC;IACJ,CAAC;EACL,CAAC,CAAC;EACF,MAAMW,IAAI,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,EAAE;EAClCrB,gBAAgB,CAACoB,IAAI,CAAC/B,IAAI,CAAC;EAC3BkB,QAAQ,CAACnB,cAAc,CAACgC,IAAI,CAAC/B,IAAI,CAAC,CAAC;EACnC,OAAOK,QAAQ;AACnB,CAAC;AAED,OAAO,MAAM6B,MAAM,GAAG,MAAM,MAAOhB,QAAQ,IAAK;EAC5C,MAAMb,QAAQ,GAAG,MAAMT,SAAS,CAAC,cAAc,EAAE;IAC7CiC,MAAM,EAAE;EACZ,CAAC,CAAC;EACFlB,gBAAgB,CAAC,IAAI,CAAC;EACtBO,QAAQ,CAACf,iBAAiB,EAAE,CAAC;EAC7B,OAAOE,QAAQ;AACnB,CAAC;AAED,OAAO,MAAM8B,cAAc,GAAG,MAAM,MAAMjB,QAAQ,IAAI;EAClD,MAAMb,QAAQ,GAAG,MAAMT,SAAS,CAAC,cAAc,CAAC;EAChDQ,cAAc,CAACC,QAAQ,CAAC;EACxB,MAAM0B,IAAI,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,EAAE;EAClCrB,gBAAgB,CAACoB,IAAI,CAAC/B,IAAI,CAAC;EAC3BkB,QAAQ,CAACnB,cAAc,CAACgC,IAAI,CAAC/B,IAAI,CAAC,CAAC;EACnC,OAAOK,QAAQ;AACnB,CAAC;AAED,MAAM+B,YAAY,GAAG;EACjBpC,IAAI,EAAEc,IAAI,CAACuB,KAAK,CAAC5B,cAAc,CAAC6B,OAAO,CAAC,aAAa,CAAC;AAC1D,CAAC;AAED,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGJ,YAAY;EAAA,IAAEK,MAAM;EAChD,QAAQA,MAAM,CAACxC,IAAI;IACf,KAAKJ,gBAAgB;MACjB,OAAO;QAAE,GAAG2C,KAAK;QAAExC,IAAI,EAAEyC,MAAM,CAACvC;MAAQ,CAAC;IAC7C,KAAKJ,mBAAmB;MACpB,OAAO;QAAE,GAAG0C,KAAK;QAAExC,IAAI,EAAE;MAAK,CAAC;IACnC;MACI,OAAOwC,KAAK;EAAC;AAEzB,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}