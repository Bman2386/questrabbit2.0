{"ast":null,"code":"import csrfFetch from './csrf';\nconst RECEIVE_CATEGORIES = 'categories/receiveCategories';\nconst RECEIVE_CATEGORY = 'categories/receiveCategory';\nconst receiveCategories = categories => ({\n  type: RECEIVE_CATEGORIES,\n  payload: categories\n});\nconst receiveCategory = categoryId => ({\n  type: RECEIVE_CATEGORY,\n  payload: categoryId\n});\nexport const fetchCategories = () => async dispatch => {\n  const response = await csrfFetch(\"api/categories\");\n  if (response.ok) {\n    const data = await response.json();\n    console.log();\n    dispatch(receiveCategories(data.categories));\n  } else {\n    console.log('error: unable to fetch categories');\n  }\n  ;\n};\nexport const fetchCategory = categoryId => async dispatch => {\n  const response = await csrfFetch(`api/categories/${categoryId}`);\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveCategory(data));\n  } else {\n    console.log('error: unable to fetch category');\n  }\n  ;\n};\nconst initialState = {};\nconst categoriesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_CATEGORIES:\n      const categories = {};\n      debugger;\n      action.categories.forEach(category => {\n        categories[category.id] = category;\n      });\n      return categories;\n    case RECEIVE_CATEGORY:\n      return Object.assign({}, {\n        [action.category]: action.category\n      });\n    default:\n      return state;\n  }\n  ;\n};\nexport default categoriesReducer;","map":{"version":3,"names":["csrfFetch","RECEIVE_CATEGORIES","RECEIVE_CATEGORY","receiveCategories","categories","type","payload","receiveCategory","categoryId","fetchCategories","dispatch","response","ok","data","json","console","log","fetchCategory","initialState","categoriesReducer","state","action","forEach","category","id","Object","assign"],"sources":["/mnt/c/Users/brend/Desktop/questrabbit2.0/frontend/src/store/category.js"],"sourcesContent":["import csrfFetch from './csrf';\r\n\r\nconst RECEIVE_CATEGORIES = 'categories/receiveCategories';\r\nconst RECEIVE_CATEGORY = 'categories/receiveCategory';\r\n\r\nconst receiveCategories = (categories) => ({\r\n    type: RECEIVE_CATEGORIES,\r\n    payload: categories\r\n});\r\n\r\nconst receiveCategory = categoryId => ({\r\n    type: RECEIVE_CATEGORY,\r\n    payload: categoryId\r\n});\r\n\r\nexport const fetchCategories = () => async dispatch => {\r\n    const response = await csrfFetch(\"api/categories\");\r\n    if (response.ok){\r\n        const data = await response.json();\r\n        console.log()\r\n        dispatch(receiveCategories(data.categories));\r\n    } else {\r\n        console.log('error: unable to fetch categories');\r\n    };\r\n};\r\n\r\nexport const fetchCategory = (categoryId) => async dispatch => {\r\n    const response = await csrfFetch(`api/categories/${categoryId}`);\r\n    if (response.ok) {\r\n        const data = await response.json();\r\n        dispatch(receiveCategory(data));\r\n    } else {\r\n        console.log('error: unable to fetch category');\r\n    };\r\n}\r\n\r\nconst initialState = {};\r\n\r\nconst categoriesReducer = (state=initialState, action) => {\r\n    switch(action.type){\r\n        case RECEIVE_CATEGORIES:\r\n            const categories = {};\r\n            debugger\r\n            action.categories.forEach(category => {\r\n                categories[category.id] = category;\r\n            });\r\n            return categories\r\n        case RECEIVE_CATEGORY:\r\n            return Object.assign({}, { [action.category]: action.category });\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default categoriesReducer;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,QAAQ;AAE9B,MAAMC,kBAAkB,GAAG,8BAA8B;AACzD,MAAMC,gBAAgB,GAAG,4BAA4B;AAErD,MAAMC,iBAAiB,GAAIC,UAAU,KAAM;EACvCC,IAAI,EAAEJ,kBAAkB;EACxBK,OAAO,EAAEF;AACb,CAAC,CAAC;AAEF,MAAMG,eAAe,GAAGC,UAAU,KAAK;EACnCH,IAAI,EAAEH,gBAAgB;EACtBI,OAAO,EAAEE;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAMC,QAAQ,IAAI;EACnD,MAAMC,QAAQ,GAAG,MAAMX,SAAS,CAAC,gBAAgB,CAAC;EAClD,IAAIW,QAAQ,CAACC,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCC,OAAO,CAACC,GAAG,EAAE;IACbN,QAAQ,CAACP,iBAAiB,CAACU,IAAI,CAACT,UAAU,CAAC,CAAC;EAChD,CAAC,MAAM;IACHW,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;EACpD;EAAC;AACL,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIT,UAAU,IAAK,MAAME,QAAQ,IAAI;EAC3D,MAAMC,QAAQ,GAAG,MAAMX,SAAS,CAAE,kBAAiBQ,UAAW,EAAC,CAAC;EAChE,IAAIG,QAAQ,CAACC,EAAE,EAAE;IACb,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCJ,QAAQ,CAACH,eAAe,CAACM,IAAI,CAAC,CAAC;EACnC,CAAC,MAAM;IACHE,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAClD;EAAC;AACL,CAAC;AAED,MAAME,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,iBAAiB,GAAG,YAAgC;EAAA,IAA/BC,KAAK,uEAACF,YAAY;EAAA,IAAEG,MAAM;EACjD,QAAOA,MAAM,CAAChB,IAAI;IACd,KAAKJ,kBAAkB;MACnB,MAAMG,UAAU,GAAG,CAAC,CAAC;MACrB;MACAiB,MAAM,CAACjB,UAAU,CAACkB,OAAO,CAACC,QAAQ,IAAI;QAClCnB,UAAU,CAACmB,QAAQ,CAACC,EAAE,CAAC,GAAGD,QAAQ;MACtC,CAAC,CAAC;MACF,OAAOnB,UAAU;IACrB,KAAKF,gBAAgB;MACjB,OAAOuB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;QAAE,CAACL,MAAM,CAACE,QAAQ,GAAGF,MAAM,CAACE;MAAS,CAAC,CAAC;IACpE;MACI,OAAOH,KAAK;EAAC;EACpB;AACL,CAAC;AAED,eAAeD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}