{"ast":null,"code":"import csrfFetch from './csrf';\nconst RECEIVE_QUESTS = 'quests/recieveQuests';\nconst RECEIVE_QUEST = 'quests/recieveQuest';\nconst receiveQuests = quests => ({\n  type: RECEIVE_QUESTS,\n  quests\n});\nconst receiveQuest = quest => ({\n  type: RECEIVE_QUEST,\n  quest\n});\nexport const fetchQuests = creatorId => async dispatch => {\n  const response = await csrfFetch(`api/quests`, {\n    method: 'GET',\n    body: JSON.stringyfy({\n      creatorId\n    })\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveQuests(data.quests));\n  } else {\n    console.log('error: unable to fetch Quests');\n  }\n  ;\n};\nexport const fetchQuest = questId => async dispatch => {\n  const response = await csrfFetch(`api/quests/${questId}`);\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveQuest(data.quest));\n  } else {\n    console.log(\"error: can't find Quest\");\n  }\n  ;\n};\nexport const createQuest = quest => async dispatch => {\n  const response = await csrfFetch(`api/quests`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify(quest)\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveQuest(data.quest));\n  } else {\n    console.log('error: cant create quest');\n  }\n  ;\n};\nexport const updateQuest = quest => async dispatch => {\n  const response = await csrfFetch(`api/quests/${quest.id}`, {\n    method: 'PATCH',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify(quest)\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveQuest(data.quest));\n  } else {\n    console.log(`error: unable to update quest`);\n  }\n  ;\n};\nconst initialState = {};\nconst questsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_QUESTS:\n      return Object.assign({}, action.quests);\n    case RECEIVE_QUEST:\n      return Object.assign({}, action.quest);\n    default:\n      return state;\n  }\n  ;\n};\nexport default questsReducer;","map":{"version":3,"names":["csrfFetch","RECEIVE_QUESTS","RECEIVE_QUEST","receiveQuests","quests","type","receiveQuest","quest","fetchQuests","creatorId","dispatch","response","method","body","JSON","stringyfy","ok","data","json","console","log","fetchQuest","questId","createQuest","headers","stringify","updateQuest","id","initialState","questsReducer","state","action","Object","assign"],"sources":["/mnt/c/Users/brend/Desktop/questrabbit2.0/frontend/src/store/quest.js"],"sourcesContent":["import csrfFetch from './csrf';\r\n\r\nconst RECEIVE_QUESTS = 'quests/recieveQuests';\r\nconst RECEIVE_QUEST = 'quests/recieveQuest';\r\n\r\nconst receiveQuests = quests => ({\r\n    type: RECEIVE_QUESTS,\r\n    quests\r\n});\r\n\r\nconst receiveQuest = quest => ({\r\n    type: RECEIVE_QUEST,\r\n    quest\r\n});\r\n\r\nexport const fetchQuests = (creatorId) => async dispatch => {\r\n    const response = await csrfFetch(`api/quests`, {\r\n        method: 'GET',\r\n        body: JSON.stringyfy({creatorId})\r\n    });\r\n    if (response.ok){\r\n        const data = await response.json()\r\n        dispatch(receiveQuests(data.quests));\r\n    } else {\r\n        console.log('error: unable to fetch Quests');\r\n    };\r\n};\r\n\r\nexport const fetchQuest = (questId) => async dispatch => {\r\n    const response = await csrfFetch(`api/quests/${questId}`);\r\n    if (response.ok) {\r\n        const data = await response.json();\r\n        dispatch(receiveQuest(data.quest));\r\n    } else {\r\n        console.log(\"error: can't find Quest\");\r\n    };\r\n};\r\n\r\nexport const createQuest = (quest) => async dispatch => {\r\n    const response = await csrfFetch(`api/quests`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(quest)\r\n    });\r\n    if (response.ok){\r\n        const data = await response.json();\r\n        dispatch(receiveQuest(data.quest));\r\n    } else {\r\n        console.log('error: cant create quest');\r\n    };\r\n};\r\n\r\nexport const updateQuest = (quest) => async dispatch => {\r\n    const response = await csrfFetch(`api/quests/${quest.id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(quest)\r\n    });\r\n    if (response.ok) {\r\n        const data = await response.json();\r\n        dispatch(receiveQuest(data.quest));\r\n    } else {\r\n        console.log(`error: unable to update quest`);\r\n    };\r\n};\r\n\r\nconst initialState = {};\r\n\r\nconst questsReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_QUESTS:\r\n            return Object.assign({}, action.quests);\r\n        case RECEIVE_QUEST:\r\n            return Object.assign({}, action.quest);\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default questsReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}