{"ast":null,"code":"import csrf from './csrf';\nconst RECEIVE_REVIEWS = 'reviews/recieveReviews';\nconst RECEIVE_REVIEW = 'reviews/recieveReview';\nconst receiveReviews = reviews => ({\n  type: RECEIVE_REVIEWS,\n  reviews\n});\nconst receiveReview = review => ({\n  type: RECEIVE_REVIEW,\n  review\n});\nexport const fetchReviews = () => async dispatch => {\n  const response = await csrfFetch('api/reviews');\n  if (response.ok) {\n    const data = response.json();\n    dispatch(receiveReviews(data.reviews));\n  } else {\n    console.log('error: unable to fetch reviews');\n  }\n  ;\n};\nexport const fetchReview = reviewId => async dispatch => {\n  const response = await csrfFetch(`api/reviews/${reviewId}`);\n  if (response.ok) {\n    const data = response.json();\n    dispatch(receiveReview(data.review));\n  } else {\n    console.log('error: unable to fetch review');\n  }\n  ;\n};\nexport const createReview = review => async dispatch => {\n  const response = await csrfFetch(`api/reviews`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify(review)\n  });\n  if (response.ok) {\n    const data = response.json();\n    dispatch(receiveReview(data.review));\n  } else {\n    console.log('error: unable to create review');\n  }\n  ;\n};\nconst initialState = {};\nconst reviewsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_REVIEWS:\n      return Object.assign({}, state, action.reviews);\n    case RECEIVE_REVIEW:\n      return Object.assign({}, state, action.review);\n    default:\n      return state;\n  }\n  ;\n};\nexport default reviewsReducer;","map":{"version":3,"names":["csrf","RECEIVE_REVIEWS","RECEIVE_REVIEW","receiveReviews","reviews","type","receiveReview","review","fetchReviews","dispatch","response","csrfFetch","ok","data","json","console","log","fetchReview","reviewId","createReview","method","headers","body","JSON","stringify","initialState","reviewsReducer","state","action","Object","assign"],"sources":["/mnt/c/Users/brend/Desktop/questrabbit2.0/frontend/src/store/review.js"],"sourcesContent":["import csrf from './csrf'\r\n\r\nconst RECEIVE_REVIEWS = 'reviews/recieveReviews';\r\nconst RECEIVE_REVIEW = 'reviews/recieveReview';\r\n\r\nconst receiveReviews = reviews => ({\r\n    type: RECEIVE_REVIEWS,\r\n    reviews\r\n});\r\n\r\nconst receiveReview = review => ({\r\n    type: RECEIVE_REVIEW,\r\n    review\r\n});\r\n\r\nexport const fetchReviews = () => async dispatch => {\r\n    const response = await csrfFetch('api/reviews');\r\n    if (response.ok){\r\n        const data = response.json();\r\n        dispatch(receiveReviews(data.reviews));\r\n    } else {\r\n        console.log('error: unable to fetch reviews');\r\n    };\r\n};\r\n\r\nexport const fetchReview = (reviewId) => async dispatch => {\r\n    const response = await csrfFetch(`api/reviews/${reviewId}`);\r\n    if (response.ok){\r\n        const data = response.json();\r\n        dispatch(receiveReview(data.review));\r\n    } else {\r\n        console.log('error: unable to fetch review')\r\n    };\r\n};\r\n\r\nexport const createReview = (review) => async dispatch => {\r\n    const response = await csrfFetch(`api/reviews`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(review)\r\n    });\r\n    if (response.ok){\r\n        const data = response.json();\r\n        dispatch(receiveReview(data.review));\r\n    } else {\r\n        console.log('error: unable to create review');\r\n    };\r\n};\r\n\r\nconst initialState = {};\r\n\r\nconst reviewsReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_REVIEWS:\r\n            return Object.assign({}, state, action.reviews);\r\n        case RECEIVE_REVIEW:\r\n            return Object.assign({}, state, action.review);\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default reviewsReducer;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,MAAMC,eAAe,GAAG,wBAAwB;AAChD,MAAMC,cAAc,GAAG,uBAAuB;AAE9C,MAAMC,cAAc,GAAGC,OAAO,KAAK;EAC/BC,IAAI,EAAEJ,eAAe;EACrBG;AACJ,CAAC,CAAC;AAEF,MAAME,aAAa,GAAGC,MAAM,KAAK;EAC7BF,IAAI,EAAEH,cAAc;EACpBK;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMC,QAAQ,IAAI;EAChD,MAAMC,QAAQ,GAAG,MAAMC,SAAS,CAAC,aAAa,CAAC;EAC/C,IAAID,QAAQ,CAACE,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,EAAE;IAC5BL,QAAQ,CAACN,cAAc,CAACU,IAAI,CAACT,OAAO,CAAC,CAAC;EAC1C,CAAC,MAAM;IACHW,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EACjD;EAAC;AACL,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAK,MAAMT,QAAQ,IAAI;EACvD,MAAMC,QAAQ,GAAG,MAAMC,SAAS,CAAE,eAAcO,QAAS,EAAC,CAAC;EAC3D,IAAIR,QAAQ,CAACE,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,EAAE;IAC5BL,QAAQ,CAACH,aAAa,CAACO,IAAI,CAACN,MAAM,CAAC,CAAC;EACxC,CAAC,MAAM;IACHQ,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAChD;EAAC;AACL,CAAC;AAED,OAAO,MAAMG,YAAY,GAAIZ,MAAM,IAAK,MAAME,QAAQ,IAAI;EACtD,MAAMC,QAAQ,GAAG,MAAMC,SAAS,CAAE,aAAY,EAAE;IAC5CS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACd,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACjB,MAAM;EAC/B,CAAC,CAAC;EACF,IAAIG,QAAQ,CAACE,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,EAAE;IAC5BL,QAAQ,CAACH,aAAa,CAACO,IAAI,CAACN,MAAM,CAAC,CAAC;EACxC,CAAC,MAAM;IACHQ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EACjD;EAAC;AACL,CAAC;AAED,MAAMS,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,cAAc,GAAG,YAAgC;EAAA,IAA/BC,KAAK,uEAACF,YAAY;EAAA,IAAEG,MAAM;EAC9C,QAAQA,MAAM,CAACvB,IAAI;IACf,KAAKJ,eAAe;MAChB,OAAO4B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,KAAK,EAAEC,MAAM,CAACxB,OAAO,CAAC;IACnD,KAAKF,cAAc;MACf,OAAO2B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,KAAK,EAAEC,MAAM,CAACrB,MAAM,CAAC;IAClD;MACI,OAAOoB,KAAK;EAAC;EACpB;AACL,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}