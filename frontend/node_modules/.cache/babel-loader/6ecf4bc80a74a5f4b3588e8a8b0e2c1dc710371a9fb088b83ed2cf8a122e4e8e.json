{"ast":null,"code":"import csrfFetch from './csrf';\nconst RECEIVE_ADVENTURERS = 'adventurers/recieveAdventurers';\nconst RECEIVE_ADVENTURER = 'adventurers/recieveAdventurer';\nconst receiveAdventurers = adventurers => ({\n  type: RECEIVE_ADVENTURERS,\n  adventurers\n});\nconst receiveAdventurer = adventurer => ({\n  type: RECEIVE_ADVENTURER,\n  adventurer\n});\nexport const fetchAdventurers = () => async dispatch => {\n  const response = await csrfFetch('api/users');\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveAdventurers(data.adventurers));\n  } else {\n    throw response;\n  }\n  ;\n};\nexport const fetchAdventurer = userId => async dispatch => {\n  const response = await csrfFetch(`api/users/${userId}`);\n  if (response.ok) {\n    const data = response.json();\n    dispatch(receiveAdventurer(data.adventurer));\n  } else {\n    throw response;\n  }\n  ;\n};\nexport const updateAdventurer = adventurer => async dispatch => {\n  const response = await csrfFetch(`api/users/${adventurer.id}`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify(adventurer)\n  });\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(receiveAdventurer(data.adventurer));\n  } else {\n    throw response;\n  }\n  ;\n};\nconst initialState = {};\nconst adventurersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_ADVENTURERS:\n      const adventurers = {};\n      action.adventurers.forEach(adventurer => {\n        adventurers[adventurer.id] = adventurer;\n      });\n      return adventurers;\n    case RECEIVE_ADVENTURER:\n      return Object.assign({}, action.adventurer);\n    default:\n      return state;\n  }\n  ;\n};\nexport default adventurersReducer;","map":{"version":3,"names":["csrfFetch","RECEIVE_ADVENTURERS","RECEIVE_ADVENTURER","receiveAdventurers","adventurers","type","receiveAdventurer","adventurer","fetchAdventurers","dispatch","response","ok","data","json","fetchAdventurer","userId","updateAdventurer","id","method","headers","body","JSON","stringify","initialState","adventurersReducer","state","action","forEach","Object","assign"],"sources":["/mnt/c/Users/brend/Desktop/questrabbit2.0/frontend/src/store/adventurer.js"],"sourcesContent":["import csrfFetch from './csrf';\r\n\r\nconst RECEIVE_ADVENTURERS = 'adventurers/recieveAdventurers';\r\nconst RECEIVE_ADVENTURER = 'adventurers/recieveAdventurer';\r\n\r\nconst receiveAdventurers = (adventurers) => ({\r\n    type: RECEIVE_ADVENTURERS,\r\n    adventurers\r\n});\r\n\r\nconst receiveAdventurer = adventurer => ({\r\n    type: RECEIVE_ADVENTURER,\r\n    adventurer\r\n});\r\n\r\nexport const fetchAdventurers = () => async dispatch => {\r\n    const response = await csrfFetch('api/users');\r\n    if (response.ok){\r\n        const data = await response.json();\r\n        dispatch(receiveAdventurers(data.adventurers));\r\n    } else {\r\n        throw response;\r\n    };\r\n};\r\n\r\nexport const fetchAdventurer = (userId) => async dispatch => {\r\n    const response = await csrfFetch(`api/users/${userId}`)\r\n    if (response.ok){\r\n        const data = response.json();\r\n        dispatch(receiveAdventurer(data.adventurer));\r\n    } else {\r\n        throw response;\r\n    };\r\n};\r\n\r\nexport const updateAdventurer = (adventurer) => async dispatch => {\r\n    const response = await csrfFetch(`api/users/${adventurer.id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(adventurer)\r\n    });\r\n    if (response.ok){\r\n        const data = await response.json();\r\n        dispatch(receiveAdventurer(data.adventurer))\r\n    } else {\r\n        throw response;\r\n    };\r\n};\r\n\r\nconst initialState = {};\r\n\r\nconst adventurersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_ADVENTURERS:\r\n            const adventurers = {};\r\n            action.adventurers.forEach(adventurer => {\r\n                adventurers[adventurer.id] = adventurer;\r\n            });\r\n            return adventurers;\r\n        case RECEIVE_ADVENTURER:\r\n            return Object.assign({}, action.adventurer);\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default adventurersReducer;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,QAAQ;AAE9B,MAAMC,mBAAmB,GAAG,gCAAgC;AAC5D,MAAMC,kBAAkB,GAAG,+BAA+B;AAE1D,MAAMC,kBAAkB,GAAIC,WAAW,KAAM;EACzCC,IAAI,EAAEJ,mBAAmB;EACzBG;AACJ,CAAC,CAAC;AAEF,MAAME,iBAAiB,GAAGC,UAAU,KAAK;EACrCF,IAAI,EAAEH,kBAAkB;EACxBK;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAMC,QAAQ,IAAI;EACpD,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,WAAW,CAAC;EAC7C,IAAIU,QAAQ,CAACC,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCJ,QAAQ,CAACN,kBAAkB,CAACS,IAAI,CAACR,WAAW,CAAC,CAAC;EAClD,CAAC,MAAM;IACH,MAAMM,QAAQ;EAClB;EAAC;AACL,CAAC;AAED,OAAO,MAAMI,eAAe,GAAIC,MAAM,IAAK,MAAMN,QAAQ,IAAI;EACzD,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAE,aAAYe,MAAO,EAAC,CAAC;EACvD,IAAIL,QAAQ,CAACC,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAI,EAAE;IAC5BJ,QAAQ,CAACH,iBAAiB,CAACM,IAAI,CAACL,UAAU,CAAC,CAAC;EAChD,CAAC,MAAM;IACH,MAAMG,QAAQ;EAClB;EAAC;AACL,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAIT,UAAU,IAAK,MAAME,QAAQ,IAAI;EAC9D,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAE,aAAYO,UAAU,CAACU,EAAG,EAAC,EAAE;IAC3DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACd,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,UAAU;EACnC,CAAC,CAAC;EACF,IAAIG,QAAQ,CAACC,EAAE,EAAC;IACZ,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCJ,QAAQ,CAACH,iBAAiB,CAACM,IAAI,CAACL,UAAU,CAAC,CAAC;EAChD,CAAC,MAAM;IACH,MAAMG,QAAQ;EAClB;EAAC;AACL,CAAC;AAED,MAAMa,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,kBAAkB,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGF,YAAY;EAAA,IAAEG,MAAM;EACpD,QAAQA,MAAM,CAACrB,IAAI;IACf,KAAKJ,mBAAmB;MACpB,MAAMG,WAAW,GAAG,CAAC,CAAC;MACtBsB,MAAM,CAACtB,WAAW,CAACuB,OAAO,CAACpB,UAAU,IAAI;QACrCH,WAAW,CAACG,UAAU,CAACU,EAAE,CAAC,GAAGV,UAAU;MAC3C,CAAC,CAAC;MACF,OAAOH,WAAW;IACtB,KAAKF,kBAAkB;MACnB,OAAO0B,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,MAAM,CAACnB,UAAU,CAAC;IAC/C;MACI,OAAOkB,KAAK;EAAC;EACpB;AACL,CAAC;AAED,eAAeD,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}